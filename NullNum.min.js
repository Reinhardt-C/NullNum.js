class NullNum{constructor(l){"string"==typeof l&&(l=NullNum.valFromString(l)),"boolean"==typeof l&&(l=NullNum.valFromBoolean(l)),void 0===l&&(l=0),"null"==typeof l&&(l=0),"symbol"==typeof l&&(l=NullNum.valFromString(l.toString().slice(7,-1))),"bigint"==typeof l&&(l=Number(l)),"number"==typeof l&&0!==l&&(l=Math.sign(l)*(1/0)),l instanceof NullNum&&(l=l.val),0==l&&(l=0),this.val=l}static valFromString(l){let u=parseFloat(l.trim());return isNaN(u)?u=NaN:u<0?u=-1/0:u>0&&(u=1/0),u}static valFromBoolean(l){return l?1/0:0}static add(l,u){return l=new NullNum(l),u=new NullNum(u),new NullNum(l.val+u.val)}add(l){return NullNum.add(this,l)}static sub(l,u){return l=new NullNum(l),u=new NullNum(u),new NullNum(l.val-u.val)}sub(l){return NullNum.sub(this,l)}static mul(l,u){return l=new NullNum(l),u=new NullNum(u),new NullNum(l.val*u.val)}mul(l){return NullNum.mul(this,l)}static div(l,u){return l=new NullNum(l),u=new NullNum(u),0==l.val&&0==u.val?new NullNum(NaN):new NullNum(l.val/u.val)}div(l){return NullNum.div(this,l)}static pow(l,u){return l=new NullNum(l),u=new NullNum(u),0==l.val&&0==u.val?new NullNum(NaN):new NullNum(l.val**u.val)}pow(l){return NullNum.pow(this,l)}}